{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Экстраверсия для ДЗ']\n",
      "   Экстраверсия\n",
      "0     -1.412542\n",
      "1     -1.016200\n",
      "2     -0.751972\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy\n",
    "\n",
    "# указание на путь к рассматриваемому файлу данных\n",
    "data = pd.ExcelFile(\"D:/Docs/30. ДЗ 14 Построение выборочных характеристик по выборке Петров Е Е.xlsx\")\n",
    "\n",
    "# вывод перечня листов в файле XLSX\n",
    "print(data.sheet_names)\n",
    "\n",
    "# парсинг нулевого листа\n",
    "data = data.parse(sheet_name = 0)\n",
    "\n",
    "# преобразование данных в датафрейм\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# отображение первых трёх строк файла для контроля содержимого\n",
    "print(df.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x0000022A9A8A01C8>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# построение Cumulative distribution function в форме гистограммы\n",
    "df.hist(bins = 200, cumulative = True )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x22a9b308188>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# построение гистограммы и графика ядерной оценки плотности вероятности\n",
    "df.plot.hist(bins = 20, alpha = 0.7)\n",
    "df.plot(kind = 'kde')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Математическое ожидание =  [-9.74646071e-16] \n",
      "\n",
      "Двусторонний доверительный интервал, надёжность 0.9\n",
      "Доверительный интервал: от  [-0.01403251]  до  [0.01403251] \n",
      "\n",
      "Двусторонний доверительный интервал, надёжность 0.95\n",
      "Доверительный интервал: от  [-0.01604773]  до  [0.01604773] \n",
      "\n",
      "Односторонний доверительный интервал, надёжность 0.9\n",
      "Нижняя граница интервала:   [-0.01177628]\n",
      "Верхняя граница интервала:  [0.01177628] \n",
      "\n",
      "Односторонний доверительный интервал, надёжность 0.95\n",
      "Нижняя граница интервала:   [-0.01403251]\n",
      "Верхняя граница интервала:  [0.01403251] \n",
      "\n",
      "Дисперсия =  0.999948744233726 \n",
      "\n",
      "Двусторонний доверительный интервал, надёжность 0.9\n",
      "Доверительный интервал: от  [-1.020093]  до  [0.98039797] \n",
      "\n",
      "Двусторонний доверительный интервал, надёжность 0.95\n",
      "Доверительный интервал: от  [-1.02302481]  до  [0.97762783] \n",
      "\n",
      "Односторонний доверительный интервал, надёжность 0.9\n",
      "Нижняя граница интервала:   [-1.0168237]\n",
      "Верхняя граница интервала:  [0.98351198] \n",
      "\n",
      "Односторонний доверительный интервал, надёжность 0.95\n",
      "Нижняя граница интервала:   [-1.020093]\n",
      "Верхняя граница интервала:  [0.98039797] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Вычисление односторонних и двусторонних \n",
    "# доверительных интервалов надёжности 0.9 и 0.95\n",
    "# для математического ожидания и дисперсии\n",
    "\n",
    "from scipy import stats\n",
    "import math\n",
    "\n",
    "# Математическое ожидание\n",
    "# Распределение Стьюдента\n",
    "alpha1 = 0.05               # уровень значимости для надёжности 0,9\n",
    "alpha2 = 0.025              # уровень значимости для надёжности 0,95\n",
    "n = len(df) - 1             # число степеней свободы\n",
    "t = stats.t(n)       \n",
    "\n",
    "# Значение квантиля распределения Стьюдента\n",
    "# для двустороннего доверительного интервала\n",
    "tcr21 = t.ppf(1 - alpha1 / 2) # надёжность 0,9\n",
    "tcr22 = t.ppf(1 - alpha2 / 2) # надёжность 0,95\n",
    "\n",
    "# для одностороннего доверительного интервала\n",
    "tcr11 = t.ppf(1 - alpha1)     # надёжность 0,9\n",
    "tcr12 = t.ppf(1 - alpha2)     # надёжность 0,95\n",
    "\n",
    "# преобразование датафрейма в массив\n",
    "df = df.values\n",
    "\n",
    "# Оценка\n",
    "m = sum(df) / len(df)\n",
    "print ('Математическое ожидание = ', m, '\\n')\n",
    "\n",
    "half_int21 = tcr21 * np.std(df) / math.sqrt(df.size)\n",
    "print ('Двусторонний доверительный интервал, надёжность 0.9')\n",
    "print ('Доверительный интервал: от ', m - half_int21, ' до ', m + half_int21, '\\n')\n",
    "\n",
    "half_int22 = tcr22 * np.std(df) / math.sqrt(df.size)\n",
    "print ('Двусторонний доверительный интервал, надёжность 0.95')\n",
    "print ('Доверительный интервал: от ', m - half_int22, ' до ', m + half_int22, '\\n')\n",
    "\n",
    "one_side_int11 = tcr11 * np.std(df) / math.sqrt(df.size)\n",
    "print ('Односторонний доверительный интервал, надёжность 0.9')\n",
    "print ('Нижняя граница интервала:  ', m - one_side_int11)\n",
    "print ('Верхняя граница интервала: ', m + one_side_int11, '\\n')\n",
    "\n",
    "one_side_int12 = tcr12 * np.std(df) / math.sqrt(df.size)\n",
    "print ('Односторонний доверительный интервал, надёжность 0.95')\n",
    "print ('Нижняя граница интервала:  ', m - one_side_int12)\n",
    "print ('Верхняя граница интервала: ', m + one_side_int12, '\\n')\n",
    "\n",
    "# Дисперсия\n",
    "# Распределение хи-квадрат\n",
    "chi2 = stats.chi2(n)\n",
    "\n",
    "# Значение квантиля хи-квадрат распределения\n",
    "# для двустороннего доверительного интервала\n",
    "chi221l = chi2.ppf(alpha1 / 2) # надёжность 0,9\n",
    "chi221r = chi2.ppf(1 - alpha1 / 2)\n",
    "chi222l = chi2.ppf(alpha2 / 2) # надёжность 0,95\n",
    "chi222r = chi2.ppf(1 - alpha2 / 2)\n",
    "\n",
    "# для одностороннего доверительного интервала\n",
    "chi111l = chi2.ppf(alpha1)     # надёжность 0,9\n",
    "chi111r = chi2.ppf(1 - alpha1)\n",
    "chi112l = chi2.ppf(alpha2)     # надёжность 0,95\n",
    "chi112r = chi2.ppf(1 - alpha2)\n",
    "\n",
    "# Оценка\n",
    "d = np.std(df) ** 2\n",
    "print('Дисперсия = ', d, '\\n')\n",
    "\n",
    "half_int_d_221l = d * n / chi221l\n",
    "half_int_d_221r = d * n / chi221r\n",
    "print ('Двусторонний доверительный интервал, надёжность 0.9')\n",
    "print ('Доверительный интервал: от ', m - half_int_d_221l, ' до ', m + half_int_d_221r, '\\n')\n",
    "\n",
    "half_int_d_222l = d * n / chi222l\n",
    "half_int_d_222r = d * n / chi222r\n",
    "print ('Двусторонний доверительный интервал, надёжность 0.95')\n",
    "print ('Доверительный интервал: от ', m - half_int_d_222l, ' до ', m + half_int_d_222r, '\\n')\n",
    "\n",
    "one_side_int_d_111l = d * n / chi111l\n",
    "one_side_int_d_111r = d * n / chi111r\n",
    "print ('Односторонний доверительный интервал, надёжность 0.9')\n",
    "print ('Нижняя граница интервала:  ', m - one_side_int_d_111l)\n",
    "print ('Верхняя граница интервала: ', m + one_side_int_d_111r, '\\n')\n",
    "\n",
    "one_side_int_d_112l = d * n / chi112l\n",
    "one_side_int_d_112r = d * n / chi112r\n",
    "print ('Односторонний доверительный интервал, надёжность 0.95')\n",
    "print ('Нижняя граница интервала:  ', m - one_side_int_d_112l)\n",
    "print ('Верхняя граница интервала: ', m + one_side_int_d_112r, '\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
